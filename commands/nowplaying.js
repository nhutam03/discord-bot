const { SlashCommandBuilder, EmbedBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('nowplaying')
        .setDescription('Xem b√†i h√°t ƒëang ph√°t'),

    async execute(interaction) {
        try {
            const queue = interaction.client.musicManager.getQueue(interaction.guild.id);
            const currentSong = interaction.client.musicManager.getNowPlaying(interaction.guild.id);

            if (!currentSong || !queue) {
                return await interaction.reply({
                    content: '‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t!',
                    ephemeral: true
                });
            }

            // L·∫•y th√¥ng tin th·ªùi gian ph√°t
            const timestamp = queue.node.getTimestamp();
            const currentTime = timestamp ? timestamp.current.label : '00:00';
            const totalTime = timestamp ? timestamp.total.label : currentSong.duration || '00:00';

            // T√≠nh progress d·ª±a tr√™n th·ªùi gian th·ª±c t·∫ø
            let progress = 0;
            if (timestamp && timestamp.current && timestamp.total) {
                const currentMs = timestamp.current.value || 0;
                const totalMs = timestamp.total.value || 1;
                progress = Math.max(0, Math.min(1, currentMs / totalMs));
            }

            // T·∫°o progress bar
            const progressBar = this.createProgressBar(progress);

            // L·∫•y th√¥ng tin queue v√† v·ªã tr√≠
            const queueList = interaction.client.musicManager.getQueueList(interaction.guild.id);
            // B√†i ƒëang ph√°t lu√¥n l√† v·ªã tr√≠ s·ªë 1
            const currentPosition = 1;
            const totalInQueue = queueList.length + 1; // +1 ƒë·ªÉ t√≠nh c·∫£ b√†i ƒëang ph√°t
            const queuePosition = `${currentPosition} / ${totalInQueue}`;

            const embed = new EmbedBuilder()
                .setColor('#1DB954') // Spotify green color
                .setTitle('üéµ Now Playing')
                .setDescription(`**${currentSong.title}**\n${currentSong.author || currentSong.artist || 'Unknown Artist'}`)
                .addFields(
                    {
                        name: 'Position',
                        value: `\`${currentTime}\``,
                        inline: true
                    },
                    {
                        name: 'Length',
                        value: `\`${totalTime}\``,
                        inline: true
                    },
                    {
                        name: 'Position in queue',
                        value: queuePosition,
                        inline: true
                    },
                    {
                        name: '\u200b', // Invisible character for spacing
                        value: `\`${currentTime}\` ${progressBar} \`${totalTime}\``,
                        inline: false
                    },
                    {
                        name: 'üë§ Requested by',
                        value: `${currentSong.requestedBy}`,
                        inline: true
                    }
                )
                .setTimestamp();

            // Th√™m thumbnail n·∫øu c√≥
            if (currentSong.thumbnail) {
                embed.setThumbnail(currentSong.thumbnail);
            }

            // Th√™m footer v·ªõi th√¥ng tin ngu·ªìn
            const source = currentSong.source || currentSong.extractor?.identifier || 'Unknown';
            embed.setFooter({
                text: `Source: ${source}`,
                iconURL: interaction.client.user.displayAvatarURL()
            });

            await interaction.reply({ embeds: [embed] });

        } catch (error) {
            console.error('‚ùå L·ªói trong command nowplaying:', error);
            await interaction.reply({
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi hi·ªÉn th·ªã b√†i h√°t hi·ªán t·∫°i!',
                ephemeral: true
            });
        }
    },

    // T·∫°o progress bar gi·ªëng nh∆∞ Spotify/Discord
    createProgressBar(progress) {
        // ƒê·∫£m b·∫£o progress lu√¥n h·ª£p l·ªá
        const safeProgress = Math.max(0, Math.min(1, progress || 0));

        const totalLength = 25;
        const currentPos = Math.round(safeProgress * totalLength);

        // T·∫°o thanh progress v·ªõi ch·∫•m tr√≤n ch·ªâ v·ªã tr√≠
        let progressBar = '';

        for (let i = 0; i <= totalLength; i++) {
            if (i === currentPos) {
                progressBar += 'üîò'; // Ch·∫•m tr√≤n ch·ªâ v·ªã tr√≠ hi·ªán t·∫°i
            } else if (i < currentPos) {
                progressBar += '‚îÅ'; // Ph·∫ßn ƒë√£ ph√°t
            } else {
                progressBar += '‚îÅ'; // Ph·∫ßn ch∆∞a ph√°t
            }
        }

        return progressBar;
    },

    // T·∫°o progress dots (alternative style)
    createProgressDots(progress) {
        // ƒê·∫£m b·∫£o progress lu√¥n h·ª£p l·ªá
        const safeProgress = Math.max(0, Math.min(1, progress || 0));

        const totalDots = 30;
        const filledDots = Math.max(0, Math.min(totalDots, Math.round(safeProgress * totalDots)));
        const emptyDots = Math.max(0, totalDots - filledDots);

        return '‚óè'.repeat(filledDots) + '‚óã'.repeat(emptyDots);
    }
};
