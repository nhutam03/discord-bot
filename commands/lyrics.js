const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, StringSelectMenuBuilder, ComponentType } = require('discord.js');
const { Client } = require('genius-lyrics');

// Kh·ªüi t·∫°o Genius client (c√≥ th·ªÉ s·ª≠ d·ª•ng token ho·∫∑c kh√¥ng)
const genius = new Client();

module.exports = {
    data: new SlashCommandBuilder()
        .setName('lyrics')
        .setDescription('Hi·ªÉn th·ªã l·ªùi b√†i h√°t ƒëang ph√°t')
        .addStringOption(option =>
            option.setName('song')
                .setDescription('T√™n b√†i h√°t (ƒë·ªÉ tr·ªëng ƒë·ªÉ l·∫•y b√†i ƒëang ph√°t)')
                .setRequired(false)
        ),

    async execute(interaction) {
        try {
            await interaction.deferReply();

            let songTitle = interaction.options.getString('song');
            let artistName = '';

            // N·∫øu kh√¥ng c√≥ input, l·∫•y b√†i ƒëang ph√°t
            if (!songTitle) {
                const currentSong = interaction.client.musicManager.getNowPlaying(interaction.guild.id);

                if (!currentSong) {
                    return await interaction.editReply({
                        content: '‚ùå Kh√¥ng c√≥ b√†i h√°t n√†o ƒëang ph√°t! S·ª≠ d·ª•ng `/lyrics <t√™n b√†i h√°t>` ƒë·ªÉ t√¨m l·ªùi b√†i h√°t c·ª• th·ªÉ.',
                        ephemeral: true
                    });
                }

                songTitle = currentSong.title;
                artistName = currentSong.author || currentSong.artist || '';

                // L√†m s·∫°ch title (lo·∫°i b·ªè c√°c k√Ω t·ª± ƒë·∫∑c bi·ªát, official video, etc.)
                songTitle = songTitle
                    .replace(/\(official.*?\)/gi, '')
                    .replace(/\[official.*?\]/gi, '')
                    .replace(/official video/gi, '')
                    .replace(/official audio/gi, '')
                    .replace(/lyrics/gi, '')
                    .replace(/\(.*?remix.*?\)/gi, '')
                    .replace(/\[.*?remix.*?\]/gi, '')
                    .replace(/\s+/g, ' ')
                    .trim();
            }

            // T√¨m ki·∫øm l·ªùi b√†i h√°t
            console.log(`üîç Searching lyrics for: "${songTitle}" by "${artistName}"`);

            const searchQuery = artistName ? `${artistName} ${songTitle}` : songTitle;
            const searches = await genius.songs.search(searchQuery);

            if (!searches || searches.length === 0) {
                return await interaction.editReply({
                    content: `‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t cho: **${songTitle}**\nüí° Th·ª≠ t√¨m ki·∫øm v·ªõi t√™n ch√≠nh x√°c h∆°n b·∫±ng c√°ch s·ª≠ d·ª•ng \`/lyrics <t√™n b√†i h√°t>\``
                });
            }

            // N·∫øu c√≥ nhi·ªÅu k·∫øt qu·∫£, hi·ªÉn th·ªã menu l·ª±a ch·ªçn
            if (searches.length > 1) {
                const options = searches.slice(0, 10).map((song, index) => ({
                    label: song.title.length > 100 ? song.title.substring(0, 97) + '...' : song.title,
                    description: `Ngh·ªá sƒ©: ${song.artist.name}`,
                    value: index.toString()
                }));

                const selectMenu = new StringSelectMenuBuilder()
                    .setCustomId('lyrics_select')
                    .setPlaceholder('Ch·ªçn b√†i h√°t b·∫°n mu·ªën xem l·ªùi...')
                    .addOptions(options);

                const row = new ActionRowBuilder().addComponents(selectMenu);

                const embed = new EmbedBuilder()
                    .setColor('#FFD700')
                    .setTitle('üîç K·∫øt qu·∫£ t√¨m ki·∫øm')
                    .setDescription(`T√¨m th·∫•y **${searches.length}** k·∫øt qu·∫£ cho: **${songTitle}**\nVui l√≤ng ch·ªçn b√†i h√°t b·∫°n mu·ªën xem l·ªùi:`)
                    .setTimestamp();

                const response = await interaction.editReply({
                    embeds: [embed],
                    components: [row]
                });

                // Ch·ªù ng∆∞·ªùi d√πng ch·ªçn
                try {
                    const confirmation = await response.awaitMessageComponent({
                        componentType: ComponentType.StringSelect,
                        time: 60000,
                        filter: i => i.user.id === interaction.user.id
                    });

                    const selectedIndex = parseInt(confirmation.values[0]);
                    const selectedSong = searches[selectedIndex];

                    await confirmation.deferUpdate();
                    await this.displayLyrics(interaction, selectedSong);

                } catch (error) {
                    await interaction.editReply({
                        content: '‚è∞ H·∫øt th·ªùi gian ch·ªù! Vui l√≤ng th·ª≠ l·∫°i.',
                        embeds: [],
                        components: []
                    });
                }
            } else {
                // Ch·ªâ c√≥ 1 k·∫øt qu·∫£, hi·ªÉn th·ªã lu√¥n
                await this.displayLyrics(interaction, searches[0]);
            }

        } catch (error) {
            console.error('‚ùå L·ªói trong command lyrics:', error);

            let errorMessage = '‚ùå C√≥ l·ªói x·∫£y ra khi t√¨m l·ªùi b√†i h√°t!';

            if (error.message.includes('No result was found')) {
                errorMessage = '‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t cho b√†i h√°t n√†y!';
            } else if (error.message.includes('rate limit')) {
                errorMessage = '‚ùå ƒê√£ v∆∞·ª£t qu√° gi·ªõi h·∫°n t√¨m ki·∫øm. Vui l√≤ng th·ª≠ l·∫°i sau!';
            }

            await interaction.editReply({
                content: errorMessage,
                ephemeral: true,
                embeds: [],
                components: []
            });
        }
    },

    async displayLyrics(interaction, song) {
        try {
            console.log(`üìù Getting lyrics for: "${song.title}" by "${song.artist.name}"`);

            // L·∫•y l·ªùi b√†i h√°t
            const lyrics = await song.lyrics();

            if (!lyrics || lyrics.trim().length === 0) {
                return await interaction.editReply({
                    content: `‚ùå Kh√¥ng t√¨m th·∫•y l·ªùi b√†i h√°t cho: **${song.title}** - **${song.artist.name}**`,
                    embeds: [],
                    components: []
                });
            }

            // T·∫°o embed v·ªõi l·ªùi b√†i h√°t
            const embed = new EmbedBuilder()
                .setColor('#FFD700')
                .setTitle(`üéµ ${song.title}`)
                .setAuthor({
                    name: song.artist.name,
                    iconURL: song.artist.image || undefined
                })
                .setTimestamp()
                .setFooter({
                    text: 'L·ªùi b√†i h√°t t·ª´ Genius',
                    iconURL: interaction.client.user.displayAvatarURL()
                });

            // Th√™m thumbnail n·∫øu c√≥
            if (song.image) {
                embed.setThumbnail(song.image);
            }

            // Format l·ªùi b√†i h√°t ƒë·∫πp h∆°n (kh√¥ng d√πng code block)
            const maxLength = 4000;
            let lyricsText = lyrics.trim();

            // L√†m s·∫°ch l·ªùi b√†i h√°t - ch·ªâ lo·∫°i b·ªè metadata ·ªü ƒë·∫ßu
            // T√¨m v√† b·∫Øt ƒë·∫ßu t·ª´ [Verse] ho·∫∑c [Intro] ƒë·∫ßu ti√™n
            const firstSectionMatch = lyricsText.match(/\[(Verse|Intro|Chorus|Pre-Chorus|Bridge|Outro)/i);
            if (firstSectionMatch) {
                const startIndex = lyricsText.indexOf(firstSectionMatch[0]);
                lyricsText = lyricsText.substring(startIndex);
            }

            // Ch·ªâ lo·∫°i b·ªè c√°c URL n·∫øu c√≥
            lyricsText = lyricsText.replace(/https?:\/\/[^\s]+/g, '');

            if (lyricsText.length > maxLength) {
                lyricsText = lyricsText.substring(0, maxLength) + '\n\n**[L·ªùi b√†i h√°t b·ªã c·∫Øt ng·∫Øn...]**';
            }

            // Format l·ªùi b√†i h√°t v·ªõi c√°c ƒëo·∫°n r√µ r√†ng
            lyricsText = lyricsText
                .replace(/\[([^\]]+)\]/g, '**[$1]**') // Format [Verse 1], [Chorus] etc.
                .replace(/\n\n/g, '\n\n') // Gi·ªØ nguy√™n line breaks
                .trim();

            embed.setDescription(lyricsText);

            // Th√™m link ƒë·∫øn Genius
            embed.addFields({
                name: 'üîó Xem ƒë·∫ßy ƒë·ªß',
                value: `[Xem tr√™n Genius](${song.url})`,
                inline: true
            });

            await interaction.editReply({
                embeds: [embed],
                components: []
            });

        } catch (error) {
            console.error('‚ùå L·ªói khi hi·ªÉn th·ªã l·ªùi b√†i h√°t:', error);
            await interaction.editReply({
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi l·∫•y l·ªùi b√†i h√°t!',
                embeds: [],
                components: []
            });
        }
    }
};