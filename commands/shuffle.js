const { SlashCommandBuilder } = require('discord.js');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('shuffle')
        .setDescription('Tr·ªôn th·ª© t·ª± playlist'),

    async execute(interaction) {
        try {
            // Ki·ªÉm tra user c√≥ trong voice channel kh√¥ng
            const voiceChannel = interaction.member.voice.channel;
            if (!voiceChannel) {
                return await interaction.reply({
                    content: '‚ùå B·∫°n c·∫ßn v√†o voice channel tr∆∞·ªõc!',
                    ephemeral: true
                });
            }

            // Ki·ªÉm tra bot c√≥ ƒëang trong voice channel kh√¥ng
            const botVoiceChannel = interaction.guild.members.me.voice.channel;
            if (!botVoiceChannel) {
                return await interaction.reply({
                    content: '‚ùå Bot kh√¥ng ƒëang trong voice channel n√†o!',
                    ephemeral: true
                });
            }

            // Ki·ªÉm tra user v√† bot c√≥ c√πng voice channel kh√¥ng
            if (voiceChannel.id !== botVoiceChannel.id) {
                return await interaction.reply({
                    content: '‚ùå B·∫°n c·∫ßn ·ªü c√πng voice channel v·ªõi bot!',
                    ephemeral: true
                });
            }

            // Ki·ªÉm tra c√≥ queue kh√¥ng
            const queue = interaction.client.musicManager.getQueue(interaction.guild.id);
            if (!queue) {
                return await interaction.reply({
                    content: '‚ùå Kh√¥ng c√≥ queue n√†o ƒë·ªÉ tr·ªôn!',
                    ephemeral: true
                });
            }

            // Ki·ªÉm tra c√≥ ƒë·ªß b√†i ƒë·ªÉ shuffle kh√¥ng (c·∫ßn √≠t nh·∫•t 2 b√†i)
            if (queue.tracks.size < 2) {
                return await interaction.reply({
                    content: '‚ùå C·∫ßn √≠t nh·∫•t 2 b√†i trong queue ƒë·ªÉ tr·ªôn!',
                    ephemeral: true
                });
            }

            // L·∫•y danh s√°ch tr∆∞·ªõc khi shuffle ƒë·ªÉ so s√°nh
            const queueList = interaction.client.musicManager.getQueueList(interaction.guild.id);
            const beforeShuffle = queueList.map(track => track.title);

            // Th·ª±c hi·ªán shuffle
            const success = interaction.client.musicManager.shuffle(interaction.guild.id);

            if (success) {
                // L·∫•y danh s√°ch sau khi shuffle
                const afterShuffle = interaction.client.musicManager.getQueueList(interaction.guild.id).map(track => track.title);

                console.log('üîÄ Shuffle comparison:', {
                    before: beforeShuffle,
                    after: afterShuffle,
                    changed: JSON.stringify(beforeShuffle) !== JSON.stringify(afterShuffle)
                });

                await interaction.reply({
                    content: `üîÄ ƒê√£ tr·ªôn playlist! (${queueList.length} b√†i)\nüí° S·ª≠ d·ª•ng \`/queue\` ƒë·ªÉ xem th·ª© t·ª± m·ªõi`
                });
            } else {
                await interaction.reply({
                    content: '‚ùå Kh√¥ng th·ªÉ tr·ªôn playlist!',
                    ephemeral: true
                });
            }

        } catch (error) {
            console.error('‚ùå L·ªói trong command shuffle:', error);
            await interaction.reply({
                content: '‚ùå C√≥ l·ªói x·∫£y ra khi tr·ªôn playlist!',
                ephemeral: true
            });
        }
    }
};